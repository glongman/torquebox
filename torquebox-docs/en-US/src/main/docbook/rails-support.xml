<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rails-support">
  <title>Ruby-on-Rails Support</title>

  <para>TorqueBox provides an enterprise-grade environment that not only
  provides complete Ruby-on-Rails compatibility, but also goes beyond the
  functionality offered in traditional Rails environments.</para>

  <section id="ruby-on-rails" revision="1">
    <title>Ruby-on-Rails</title>

    <para>Ruby-on-Rails (also referred to as "RoR" or "Rails") is one of the
    most popular Model-View-Controller (MVC) frameworks for the Ruby language.
    It was originally created by David Heinemeier Hansson at <ulink
    url="http://37signals.com/">37signals</ulink> during the course of
    building many actual Ruby applications for their consulting
    business.</para>

    <para>Rails has straight-forward components representing models, views,
    and controllers. The framework as a whole values convention over
    configuration. It has been described as "opinionated software" in that
    many decisions have been taken away from the end-user.</para>

    <para>It is exactly the opinionated nature of Rails that allows it to be
    considered a simple and agile framework for quickly building web-based
    applications. Additionally, since Ruby is an interpreted language instead
    of compiled, the assets of an application can be edited quickly, with the
    results being immediately available. In most cases, the application does
    not need to be restarted to see changes in models, views or controllers
    reflected.</para>
  </section>

  <section id="intro-rails-on-torquebox" revision="1">
    <title>Rails on TorqueBox</title>

    <para>Since Ruby-on-Rails ostensibly doesn't do anything new, but simply
    does it with a different language, TorqueBox uses the power of <ulink
    url="http://jruby.org/">JRuby</ulink> to deploy regular Ruby-on-Rails apps
    within the JBoss AS appserver.</para>

    <para>Your Rails application gets deployed alongside any other WAR or EAR,
    complete with the ability to run on a cluster. The full JBoss Web stack is
    utilized to provide enterprise-grade serving for Rails applications</para>
  </section>

  <section id="preparing-your-rails-application">
    <title>Preparing your Rails application</title>

    <para>While TorqueBox is 100% compatible with Ruby-on-Rails, there are a
    few steps that must be taken to ensure success.</para>

    <section>
      <title>Using the application template</title>

      <para>You can use the included application template to setup a new Rails
      application or modify an existing one to work with TorqueBox.</para>

      <section>
        <title>Creating a new Rails application</title>

        <para>To create a new Rails application using the template, simply use
        the <parameter>-m</parameter> parameter when you execute the
        <command>rails</command> command.</para>

        <para><screen><prompt>$</prompt> <command>rails</command> <parameter>-m <envar>$TORQUEBOX_HOME</envar>/share/rails/template.rb</parameter></screen>This
        will perform the necessary setup to quickly get started with
        TorqueBox.</para>
      </section>

      <section>
        <title>Applying template to an existing application</title>

        <para>To apply the template to an existing application, simply use the
        <command>rails:template</command> rake task.</para>

        <para><screen><prompt>$</prompt> <command>rake</command> <parameter>rails:template</parameter> <varname>LOCATION</varname>=<envar>$TORQUEBOX_HOME</envar>/share/rails/template.rb</screen></para>

        <para></para>
      </section>
    </section>

    <section>
      <title>Manually configuring an application</title>

      <section>
        <title>Include the JDBC Gems for Database Connectivity</title>

        <para>ActiveRecord applications deployed on TorqueBox benefit from
        using the Java-based JDBC database drivers. These drivers are provided
        as a handful of gems which you may include into your application
        through <filename>config/environment.rb</filename>.</para>

        <para>JDBC gems for many popular databases is pre-installed with the
        TorqueBox server. You simply must reference the
        activerecord-jdbc-adapter from your
        <filename>environment.rb</filename> within the
        <code>Rails::Initializer.run</code> block.</para>

        <para><screen>Rails::Initializer.run do |config|

  config.gem "activerecord-jdbc-adapter",
             :lib=&gt;'jdbc_adapter'

end</screen></para>

        <para>All databases will require inclusion of the
        <filename>activerecord-jdbc-adapter</filename>. No other gems need to
        be required or loaded, since ActiveRecord will perform further
        discovery on its own. Database gems supporting Derby, H2, HSQLDB,
        MySQL, PostgreSQL, and SQLite3 are supplied in the TorqueBox binary
        distribution.</para>
      </section>

      <section>
        <title>Include the TorqueBox Ruby packages</title>

        <para>In order to gain access to the advanced features of TorqueBox,
        you must include the TorqueBox packages into your project. The
        TorqueBox gems are also included into your application through
        <filename>config/environment.rb</filename>.<screen>Rails::Initializer.run do |config|
  
  config.gem "torquebox-gem"
  config.gem "torquebox-rails"

end</screen></para>

        <section>
          <title><filename>torquebox-gem</filename></title>

          <para>The <filename>torquebox-gem</filename> provides access to
          advanced functionality, such as scheduled jobs and task
          queues.</para>
        </section>

        <section>
          <title><filename>torquebox-rails</filename></title>

          <para>The <filename>torquebox-rails</filename> provides additional
          <command>rake</command> tasks to your application. These tasks
          assist in deploying, undeploying, and executing the TorqueBox
          server. To make these tasks available to your project, you also need
          to add a <command>require</command> statement to the Rakefile at the
          top of your application.</para>

          <para><screen>require 'torquebox/tasks'</screen></para>

          <para>Invoking <command>rake -T</command> will show the tasks now
          available within your project.</para>

          <para><screen>rake torquebox:rails:check_frozen         # Check for that Rails has been f...
rake torquebox:rails:deploy               # Deploy the Rails app
rake torquebox:rails:undeploy             # Undeploy the Rails app
rake torquebox:server:check               # Check your installation of the ...
rake torquebox:server:run                 # Run TorqueBox server</screen></para>
        </section>
      </section>

      <section>
        <title>Eliminate or replace "native" Gems</title>

        <para>"Native" gems that rely upon machine-specific compiled code do
        not function with JRuby and TorqueBox. You must replaced these gems
        with pure-Ruby or pure-Java implementations. In the future, native
        gems using the FFI facilities will be usable.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Scheduled Jobs</title>

    <para>Rails applications support <link linkend="scheduled-jobs">scheduled
    jobs</link> located under
    <filename>$RAILS_ROOT/app/jobs/</filename>.</para>
  </section>

  <section>
    <title>Task Queues</title>

    <para>Rails applications support <link linkend="task-queues">task
    queues</link> located under
    <filename>$RAILS_ROOT/app/queues/</filename>.</para>
  </section>

  <section>
    <title>Deploying</title>

    <para>The TorqueBox Application Server is capable of serving many
    applications simultaneously. To add your application to the server, you
    must <emphasis>deploy</emphasis> it.</para>

    <section id="deploy-using-rake" revision="1">
      <title>Deploy using the Rake tasks</title>

      <para>The TorqueBox-Rails support package includes Rake tasks to deploy
      and undeploy your application from an instance of the TorqueBox
      Server.</para>

      <para>First, the variable <envar>$JBOSS_HOME</envar> must be set to the
      path of the top of your JBoss installation as described in <xref
      linkend="installation" /></para>

      <para><screen><prompt>$</prompt> <command>export JBOSS_HOME=/path/to/torquebox/jboss</command></screen></para>

      <para>If you're using any configuration other than
      <classname>default</classname>, you must also set
      <envar>$JBOSS_CONF</envar>.</para>

      <para><screen><prompt>$</prompt> <command>export JBOSS_CONF=web</command></screen></para>

      <para>Once these variables are set, you may perform a default deployment
      using the <command>jboss:rails:deploy</command> task.</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:rails:deploy</command></screen></para>

      <para>To undeploy your application, the jboss:rails:undeploy task is
      available</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:rails:undeploy</command></screen></para>

      <para>The TorqueBox Server does not need to be running for these
      commands to work.</para>

      <para>By default, these tasks deploy your application to root of your
      TorqueBox Server's web space, without any virtual host configuration. To
      access the application once deployed, you should use your browser to
      access <uri>http://localhost:8080/</uri>.</para>

      <para>When the application is deployed, a deployment descriptor is
      written to the
      <filename>$JBOSS_HOME/server/$JBOSS_CONF/deploy/</filename> directory
      with a filename based upon the directory name of your
      <filename>$RAILS_ROOT</filename>.</para>

      <para>For instance, if your application was deployed from
      /Users/bob/myapp/, the deployment descriptor would be named
      <filename>myapp-rails.yml</filename>.</para>

      <para>Rewriting or simply updating the last-modified time (using a
      command such as <command>touch</command>) of this descriptor will cause
      the TorqueBox server to redeploy the application. The
      <command>torquebox:rails:deploy</command> task simply emits this
      file.</para>

      <para>Removing the descriptor will cause the TorqueBox server to
      undeploy the application. This is what the
      <command>torquebox:rails:undeploy</command> task does.</para>

      <section>
        <title>Deploying a non-root context</title>

        <para>By default, the <command>torquebox:rails:deploy</command> task
        will attach your application to the root context. If you would rather
        deploy to a non-root context, you may provide it as an argument to the
        task invocation.</para>

        <para><screen><prompt>$</prompt> <command>rake torquebox:rails:deploy['/my-application']</command></screen>The
        root of your application would then be accessible at
        <uri>http://localhost:8080/my-application</uri>.</para>
      </section>
    </section>

    <section>
      <title>Deploy using a descriptor</title>

      <para>To customize some of the aspects of deployment, instead of using
      the Rake tasks, you may manually create a <emphasis>deployment
      descriptor</emphasis>. A deployment descriptor is a small text file that
      is placed in the <filename>deploy/</filename> directory of the server in
      order to have the application deployed.</para>

      <section>
        <title>Location &amp; Naming</title>

        <para>The deployment descriptor needs to be placed within the deploy/
        directory of the AS configuration in use. If you are using the default
        configuration, the path would be:</para>

        <para><screen><filename>$JBOSS_HOME/server/default/deploy/</filename></screen></para>

        <para>The descriptor is a YAML file, and must end with the suffix of
        <filename>-rails.yml</filename>. The prefix is arbitrary, but is
        usually some form of your application's name.</para>

        <para><screen><filename>$JBOSS_HOME/server/default/deploy/<emphasis
                role="bold">myapp-rails.yml</emphasis></filename></screen></para>
      </section>

      <section>
        <title>Contents of the descriptor</title>

        <para>The descriptor has 2 main sections:</para>

        <orderedlist>
          <listitem>
            <para>General application configuration</para>
          </listitem>

          <listitem>
            <para>Web-specific configuration</para>
          </listitem>

          <listitem>
            <para>Sip-specific configuration</para>
          </listitem>
        </orderedlist>

        <section>
          <title>General Application Configuration</title>

          <para>The application section describes the
          <envar>RAILS_ROOT</envar> and <envar>RAILS_ENV</envar> for the
          deployed application. Under traditional (mongrel, lighttpd)
          deployments, this information is picked up through the current
          working directory or environment variables. Since the TorqueBox
          Server runs from a different location, the current working directory
          has no meaning. Likewise, as multiple applications may be deployed
          within a single TorqueBox Server, a single global environment
          variable to set <envar>$RAILS_ENV</envar> is nonsensical.</para>

          <para><example>
              <title>Application configuration in *-rails.yml</title>

              <para><screen>application:
  RAILS_ROOT: /path/to/myapp
  RAILS_ENV:  development</screen></para>
            </example></para>
        </section>

        <section>
          <title>Web-specific configuration</title>

          <para>Traditional Rails applications are deployed individually,
          without respect to hostnames or context-path. Running under
          TorqueBox, you may host several apps under a single host, or
          multiple apps under different hostnames.</para>

          <para>Both the virtual-host and context-path configuration are
          nested under the <emphasis>web</emphasis> section.</para>

          <section>
            <title>Virtual Hosts</title>

            <para>Virtual hosts allow one application to respond to
            <emphasis>www.host-one.com</emphasis>, while another running
            within the same JBoss AS to respond to
            <emphasis>www.host-two.com</emphasis>. If no host is specified,
            then the application will respond to all requests directed at the
            TorqueBox Server.</para>

            <para><example>
                <title>Virtual host configuration in *-rails.yml</title>

                <para><screen>web:
  host: www.host-one.com</screen></para>
              </example></para>
          </section>

          <section>
            <title>Context paths</title>

            <para>In addition to virtual hosts, applications within a single
            TorqueBox Server may be separated purely by a <emphasis>context
            path</emphasis>. For a given host, the context path is the prefix
            used to access the application. Traditional Rails apps respond
            from the top of a site. By using a context path, you can mount
            applications at a location under the root.</para>

            <para>For example, <emphasis
            role="bold">http://www.host-one.com/app-one/</emphasis> could
            point to one application, while <emphasis
            role="bold">http://www.host-one.com/app-two/</emphasis> could
            point to another separate application.</para>

            <para><example>
                <title>Context path configuration in *-rails.yml</title>

                <para><screen>web:
  context: /app-one</screen></para>
              </example></para>

            <para>The context path and virtual host configurations can be used
            at the same time, if desired.</para>

            <para><example>
                <title>Virtual host with context path configuration in
                *-rails.ymls</title>

                <para><screen>web:
  host: www.mycorp.com
  context: /app-one</screen></para>
              </example></para>
          </section>
        </section>

        <section>
          <title>SIP-specific configuration</title>

          <para>The sip configuration section allows you to define the appname
          (application name) of the SIP Servlets application (mandatory) and
          the name of the class that will handle the SIP messages :</para>

          <para><example>
              <title>SIP configuration in *-rails.yml</title>

              <para><screen>sip:  
  rubycontroller: SipHandler</screen></para>
            </example></para>
        </section>
      </section>

      <section>
        <title>Complete *-rails.yml Deployment Descriptor Example</title>

        <para><screen>application:
  RAILS_ROOT:  /path/to/myappp
  RAILS_ENV:   development
web:
  host:    www.mycorp.com
  context: /app-one
sip:   
  rubycontroller: SipHandler</screen></para>
      </section>
    </section>

    <section>
      <title>Deployment using a partial descriptor</title>

      <para>While the
      <filename><replaceable>myapp</replaceable>-rails.yml</filename>
      descriptor may contain all the abovementioned information, you may also
      deploy using a combination of descriptor and additional files in your
      <filename>config/</filename> directory. The bare minimum required in the
      descriptor is the <varname>RAILS_ROOT</varname> setting for the
      <code>application:</code> block.</para>

      <para>The primary purpose is to allow an application to be fully
      self-contained, specifying all vital production information within the
      same codebase as the rest of the application. This is useful for
      Capistrano-based deployments.</para>

      <section>
        <title><filename>config/web.yml</filename></title>

        <para>The entire <code>web:</code> section of
        <filename><replaceable>myapp</replaceable>-rails.yml</filename> may be
        supplied from within the application's own
        <filename>config/web.yml</filename> file, if present. If both
        <filename><replaceable>myapp</replaceable>-rails.yml</filename> and
        <filename>config/web.yml</filename> exist, the
        <filename><replaceable>myapp</replaceable>-rails.yml</filename>
        configuration values take precedent.</para>

        <para>This allows for typical values to be placed in
        <filename>config/web.yml</filename> for production deployment, while
        allowing developers to override them through
        <filename><replaceable>myapp</replaceable>-rails.yml</filename> during
        development deployments.</para>

        <para><example>
            <title><filename>config/web.yml</filename></title>

            <para><screen>host: torquebox.org
context: /</screen></para>
          </example></para>
      </section>

      <section>
        <title><filename>config/rails-env.yml</filename></title>

        <para>If present in your application, config/rails-env.yml can specify
        the default value for <varname>RAILS_ENV</varname>. A value specified
        in myapp-rails.yml deployment descriptor may still override the value
        provided by the application's own
        <filename>config/rails-env.yml</filename>.</para>

        <para><example>
            <title>Example <filename>config/rails-env.yml</filename></title>

            <para><screen>RAILS_ENV: production</screen></para>
          </example></para>

        <para>Similar to config/web.yml, usage of config/rails-env.yml can
        simplify production deployment by providing the correct value from
        within the app.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Control thread concurrency using
    <filename>pooling.yml</filename></title>

    <para>Since the TorqueBox platform supports Rails 2.2+, which are
    threadsafe, the default mode of operation is to share a single Ruby
    runtime across threads.</para>

    <para>If your application is not designed to be threadsafe, you can
    instead pool the runtimes allowing a single-theaded model. Typically, if
    your application creates and uses global variables to manage state for a
    single request, you may have problems with the default multithreaded
    behavior.</para>

    <para>To enable pooling-mode instead of shared multithreading you need to
    add a YAML file at
    <filename><envar>$RAILS_ROOT</envar>/config/pooling.yml</filename>. This
    file is optional, and only required if you wish to enable pooling.</para>

    <para>The <filename>pooling.yml</filename> file contains a section for
    each configurable pool of runtimes.</para>

    <section>
      <title>Pooling for web requests</title>

      <para>A section named web defines the pooling configuration for all
      regular web requests. This does not include SOAP endpoints. SIP requests
      do participate in the web pool, though.</para>

      <para>Web pooling is defined by creating a section named
      <classname>web</classname>, and specifying <parameter>min</parameter>
      and <parameter>max</parameter> parameters for the pool. The minimum
      number of runtimes will be created before your application starts. As
      the available items in the pool are exhausted, new ones will be
      asynchronously created, up to the maximum specified.</para>

      <para>Currently there is no reaping performed on the pool reduce its
      size.</para>

      <para><example>
          <title>Example config/pooling.yml</title>

          <para><screen>web:
  min: 2
  max: 30</screen></para>
        </example></para>
    </section>
  </section>

  <section>
    <title>Integrate additional JEE components</title>

    <para>The <filename><envar>$RAILS_ROOT</envar>/config/</filename>
    directory may also hold other JEE and JBoss deployment descriptors. It is
    conceptually equivalent to <filename>META-INF/</filename> or
    <filename>WEB-INF/</filename> in JARs and WARs.</para>

    <para>For instance, it may contain
    <filename><replaceable>mydb</replaceable>-ds.xml</filename> to deploy a
    datasoure, <filename>web.xml</filename> to configure additional Servlets
    and Filters, or a <filename>jboss-web.xml</filename> to manage the
    enterprise naming context.</para>
  </section>

  <section>
    <title>Controlling the TorqueBox Server</title>

    <section>
      <title>Using Rake</title>

      <para>To start the TorqueBox server from within your Rails application,
      the Rake task <command>torquebox:server:run</command> is
      provided.</para>

      <para><screen><prompt>$</prompt> <command>rake torquebox:server:run</command>
TorqueBox Server OK: /Users/bob/oddthesis/jboss/jdk1.6/current/server/default
=========================================================================

  JBoss Bootstrap Environment</screen>To stop the server, simply interrupt the
      terminal using <emphasis>control-c</emphasis>. While the server is
      running, applications may be repeatedly deployed and undeployed.</para>
    </section>
  </section>
</chapter>
